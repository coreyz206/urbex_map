---
swagger: "2.0"
info:
  description: "Urban Exploration web API."
  version: "beta 0.1"
  title: "Urbex Map API"
  contact:
    email: "coreyz206@gmail.com"
host: "sampleurl.urbex"
basePath: "/v2"
tags:
- name: "locations"
  description: "Get and change locations in the database"
schemes:
- "https"
paths:
  /locations:
    get:
      tags:
      - "locations"
      summary: "Gets list of location objects"
      description: "Multiple places can be provided in a single json"
      operationId: "get_places"
      produces:
      - "application/json"
      parameters:
      - name: "category"
        in: "query"
        description: "Category values to filter"
        required: false
        type: "array"
        items:
          type: "string"
          default: ""
          enum:
          - "good"
          - "okay"
          - "bad"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Location"
        400:
          description: "Invalid status value"
      security:
      - basicAuth: []
      x-swagger-router-controller: "swagger_server.controllers.locations_controller"
    post:
      tags:
      - "locations"
      summary: "Add a new place to the database"
      description: ""
      operationId: "add_place"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Location object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Location"
      responses:
        401:
          description: "Authentication information is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
        405:
          description: "Invalid input"
      security:
      - basicAuth: []
      x-swagger-router-controller: "swagger_server.controllers.locations_controller"
    put:
      tags:
      - "locations"
      summary: "Edit an existing place"
      description: ""
      operationId: "update_place"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Place object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Location"
      responses:
        401:
          description: "Authentication information is missing or invalid"
          headers:
            WWW_Authenticate:
              type: "string"
        404:
          description: "Place not found"
        405:
          description: "Validation exception"
      security:
      - basicAuth: []
      x-swagger-router-controller: "swagger_server.controllers.locations_controller"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "create_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "create_users_with_array_input"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "create_users_with_list_input"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "login_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logout_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "get_user_by_name"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "update_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "delete_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
securityDefinitions:
  locationbase_auth:
    type: "oauth2"
    authorizationUrl: "http://sample.auth.io"
    flow: "implicit"
    scopes:
      write:locations: "add locations/change existing ones"
      read:locations: "view existing locations"
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  basicAuth:
    type: "basic"
definitions:
  Location:
    type: "object"
    properties:
      name:
        type: "string"
      category:
        type: "string"
        description: "Quality of location"
        enum:
        - "good places"
        - "questionable places"
        - "bad places"
      description:
        type: "string"
      xCoord:
        type: "number"
        format: "double"
      yCoord:
        type: "number"
        format: "double"
    example:
      yCoord: 6.02745618307040320615897144307382404804229736328125
      xCoord: 0.80082819046101150206595775671303272247314453125
      name: "name"
      description: "description"
      category: "good places"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
responses:
  UnauthorizedError:
    description: "Authentication information is missing or invalid"
    headers:
      WWW_Authenticate:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
