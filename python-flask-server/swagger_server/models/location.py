# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Location(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, category: str=None, description: str=None, x_coord: float=None, y_coord: float=None):  # noqa: E501
        """Location - a model defined in Swagger

        :param name: The name of this Location.  # noqa: E501
        :type name: str
        :param category: The category of this Location.  # noqa: E501
        :type category: str
        :param description: The description of this Location.  # noqa: E501
        :type description: str
        :param x_coord: The x_coord of this Location.  # noqa: E501
        :type x_coord: float
        :param y_coord: The y_coord of this Location.  # noqa: E501
        :type y_coord: float
        """
        self.swagger_types = {
            'name': str,
            'category': str,
            'description': str,
            'x_coord': float,
            'y_coord': float
        }

        self.attribute_map = {
            'name': 'name',
            'category': 'category',
            'description': 'description',
            'x_coord': 'xCoord',
            'y_coord': 'yCoord'
        }

        self._name = name
        self._category = category
        self._description = description
        self._x_coord = x_coord
        self._y_coord = y_coord

    @classmethod
    def from_dict(cls, dikt) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Location of this Location.  # noqa: E501
        :rtype: Location
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Location.


        :return: The name of this Location.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Location.


        :param name: The name of this Location.
        :type name: str
        """

        self._name = name

    @property
    def category(self) -> str:
        """Gets the category of this Location.

        Quality of location  # noqa: E501

        :return: The category of this Location.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this Location.

        Quality of location  # noqa: E501

        :param category: The category of this Location.
        :type category: str
        """
        allowed_values = ["good places", "questionable places", "bad places"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def description(self) -> str:
        """Gets the description of this Location.


        :return: The description of this Location.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Location.


        :param description: The description of this Location.
        :type description: str
        """

        self._description = description

    @property
    def x_coord(self) -> float:
        """Gets the x_coord of this Location.


        :return: The x_coord of this Location.
        :rtype: float
        """
        return self._x_coord

    @x_coord.setter
    def x_coord(self, x_coord: float):
        """Sets the x_coord of this Location.


        :param x_coord: The x_coord of this Location.
        :type x_coord: float
        """

        self._x_coord = x_coord

    @property
    def y_coord(self) -> float:
        """Gets the y_coord of this Location.


        :return: The y_coord of this Location.
        :rtype: float
        """
        return self._y_coord

    @y_coord.setter
    def y_coord(self, y_coord: float):
        """Sets the y_coord of this Location.


        :param y_coord: The y_coord of this Location.
        :type y_coord: float
        """

        self._y_coord = y_coord
